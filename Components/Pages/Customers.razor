@page "/customers"
@using Final_Project.Components.Pages.Data
@using System.ComponentModel.DataAnnotations

<h1>Customer Management</h1>
<style>
    .form-container {
        display: flex;
        flex-direction: column;
        gap: 12px;
        width: 380px;
        font-family: Arial, sans-serif;
    }

    .form-group {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    label {
        width: 100px;
        font-weight: 500;
        font-size: 14px;
        color: #333;
    }

    input[type="text"],
    input[type="tel"],
    input[type="email"],
    input[type="number"],
    select {
        width: 220px;
        padding: 8px 14px;
        border: 1px solid #ccc;
        border-radius: 999px;
        font-size: 14px;
        color: #333;
        outline: none;
        transition: border-color 0.2s;
        background-color: #fff;
    }

        input:focus,
        select:focus {
            border-color: #7a9af7;
        }

    .button-group {
        display: flex;
        justify-content: space-between;
        margin-top: 16px;
    }

        .button-group button {
            padding: 8px 16px;
            border: none;
            border-radius: 999px;
            background-color: #4a90e2;
            color: white;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

            .button-group button:hover {
                background-color: #3b78c2;
            }

    table.customer-table {
        margin-top: 20px;
        border-collapse: collapse;
        width: 100%;
        font-family: Arial, sans-serif;
    }

    .customer-table th,
    .customer-table td {
        border: 1px solid #ccc;
        padding: 8px 12px;
        text-align: center;
    }

    .customer-table th {
        background-color: #f0f0f0;
    }

    .action-buttons button {
        margin: 0 4px;
        padding: 5px 10px;
        border: none;
        border-radius: 5px;
        font-size: 12px;
        cursor: pointer;
        color: white;
    }

    .action-buttons .ban {
        background-color: #e67e22;
    }

    .action-buttons .delete {
        background-color: #e74c3c;
    }

    .action-buttons .discount {
        background-color: #27ae60;
    }

    .action-buttons button:hover {
        opacity: 0.85;
    }
</style>
<div class="form-container">
    <div class="form-group">
        <label>Customer ID:</label>
        <input type="number" @bind="currentCustomer.CustomerID" readonly />
    </div>
    <div class="form-group">
        <label>First Name:</label>
        <input type="text" @bind="currentCustomer.FirstName" />
    </div>
    <div class="form-group">
        <label>Last Name:</label>
        <input type="text" @bind="currentCustomer.LastName" />
    </div>
    <div class="form-group">
        <label>Phone:</label>
        <input type="tel" @bind="currentCustomer.Phone" />
    </div>
    <div class="form-group">
        <label>Email:</label>
        <input type="email" @bind="currentCustomer.Email" />
    </div>

    <div class="button-group">
        <button @onclick="AddCustomer" disabled="@isBusy">Add Customer</button>
        <button @onclick="UpdateCustomer" disabled="@isBusy">Update Customer</button>
        <button @onclick="ClearForm" disabled="@isBusy">Clear</button>
    </div>
</div>

@if (isLoading)
{
    <p>Loading customers...</p>
}
else if (customers.Count == 0)
{
    <p>No customers found</p>
}
else
{
    <table class="customer-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Phone</th>
                <th>Email</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customers)
            {
                <tr>
                    <td>@customer.CustomerID</td>
                    <td>@customer.FirstName</td>
                    <td>@customer.LastName</td>
                    <td>@customer.Phone</td>
                    <td>@customer.Email</td>
                    <td class="action-buttons">
                        <button class="edit" @onclick="() => EditCustomer(customer)" disabled="@isBusy">Edit</button>
                        <button class="delete" @onclick="() => DeleteCustomer(customer.CustomerID)" disabled="@isBusy">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Customer> customers = new();
    private Customer currentCustomer = new(0, "", "", null, "");
    private bool isLoading = true;
    private bool isBusy = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
        isLoading = false;
    }

    private async Task LoadCustomers()
    {
        try
        {
            customers = await Customer.GetCustomersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading customers: {ex.Message}");
        }
    }

    private async Task AddCustomer()
    {
        isBusy = true;
        try
        {
            await Customer.AddCustomerAsync(currentCustomer);
            await LoadCustomers();
            ClearForm();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding customer: {ex.Message}");
        }
        finally
        {
            isBusy = false;
        }
    }

    private async Task UpdateCustomer()
    {
        isBusy = true;
        try
        {
            await Customer.UpdateCustomerAsync(currentCustomer);
            await LoadCustomers();
            ClearForm();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating customer: {ex.Message}");
        }
        finally
        {
            isBusy = false;
        }
    }

    private async Task DeleteCustomer(int customerID)
    {
        isBusy = true;
        try
        {
            await Customer.DeleteCustomerAsync(customerID);
            await LoadCustomers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting customer: {ex.Message}");
        }
        finally
        {
            isBusy = false;
        }
    }

    private void EditCustomer(Customer customer)
    {
        currentCustomer = new Customer(
            customer.CustomerID,
            customer.FirstName,
            customer.LastName,
            customer.Phone,
            customer.Email
        );
    }

    private void ClearForm()
    {
        currentCustomer = new Customer(0, "", "", null, "");
    }
}