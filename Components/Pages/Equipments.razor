@page "/equipments"
@using Final_Project.Components.Pages.Data

<h1>Equipment</h1>
<style>
    /* Your existing CSS remains unchanged */
    .container {
        display: flex;
        gap: 20px;
        padding: 20px;
        font-family: Arial, sans-serif;
    }

    .equipment-list-section {
        flex: 1;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .equipment-list-section h2 {
            margin-top: 0;
            margin-bottom: 15px;
            color: #333;
        }

    .equipment-list {
        list-style: none;
        padding: 0;
        margin-bottom: 15px;
    }

        .equipment-list li {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }

            .equipment-list li:last-child {
                border-bottom: none;
            }

            .equipment-list li label {
                display: flex;
                align-items: center;
                font-size: 14px;
                color: #333;
            }

            .equipment-list li input[type="checkbox"] {
                margin-right: 10px;
            }

            .equipment-list li .actions button {
                padding: 5px 10px;
                border: none;
                border-radius: 999px;
                font-size: 12px;
                cursor: pointer;
                color: white;
                margin-left: 8px;
            }

            .equipment-list li .actions .edit {
                background-color: #4a90e2;
            }

            .equipment-list li .actions .delete {
                background-color: #e74c3c;
            }

    .equipment-list-controls {
        display: flex;
        gap: 10px;
        margin-bottom: 15px;
    }

        .equipment-list-controls button {
            padding: 8px 16px;
            border: none;
            border-radius: 999px;
            background-color: #4a90e2;
            color: white;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

            .equipment-list-controls button:hover {
                background-color: #3b78c2;
            }

    .pagination {
        display: flex;
        gap: 5px;
        align-items: center;
    }

        .pagination button {
            padding: 6px 10px;
            border: 1px solid #ccc;
            border-radius: 999px;
            font-size: 12px;
            cursor: pointer;
            background-color: white;
            color: #333;
        }

            .pagination button.active {
                background-color: #4a90e2;
                color: white;
                border-color: #4a90e2;
            }

    .add-equipment-section {
        flex: 1;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .add-equipment-section h2 {
            margin-top: 0;
            margin-bottom: 15px;
            color: #333;
        }

    .add-equipment-form {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .form-group {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .form-group label {
            width: 100px;
            font-weight: 500;
            font-size: 14px;
            color: #333;
        }

        .form-group input[type="text"],
        .form-group input[type="number"] {
            width: 220px;
            padding: 8px 14px;
            border: 1px solid #ccc;
            border-radius: 999px;
            font-size: 14px;
            color: #333;
            outline: none;
            transition: border-color 0.2s;
            background-color: #fff;
        }

    .add-equipment-form button[type="submit"] {
        margin-top: 16px;
        padding: 8px 16px;
        border: none;
        border-radius: 999px;
        background-color: #4a90e2;
        color: white;
        font-size: 14px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .add-equipment-form button[type="submit"]:hover {
            background-color: #3b78c2;
        }
</style>

<div class="container">
    <div class="equipment-list-section">
        <h2>Equipment List</h2>
        @if (equipmentList == null)
        {
            <p>Loading equipment...</p>
        }
        else if (!equipmentList.Any())
        {
            <p>No equipment found.</p>
        }
        else
        {
            <ul class="equipment-list">
                @foreach (var equipment in equipmentList)
                {
                    <li>
                        <label>
                            <input type="checkbox" @bind="equipment.IsSelected" />
                            @equipment.Name
                        </label>
                        <div class="actions">
                            <button class="edit">✏️</button>
                            <button class="delete" @onclick="() => RemoveEquipmentAsync(equipment.EquipmentID)">🗑️</button>
                        </div>
                    </li>
                }
            </ul>
            <div class="equipment-list-controls">
                <button @onclick="ModifySelectedEquipment">Modify Equipment</button>
                <button @onclick="RemoveSelectedEquipmentAsync">Remove Equipment</button>
            </div>
            <div class="pagination">
                <button class="@(currentPage == 1 ? "active" : "")">1</button>
                <button class="@(currentPage == 2 ? "active" : "")">2</button>
                <button class="@(currentPage == 3 ? "active" : "")">3</button>
                <span>...</span>
                <button class="@(currentPage == 67 ? "active" : "")">67</button>
                <button class="@(currentPage == 68 ? "active" : "")">68</button>
            </div>
        }
    </div>

    <div class="add-equipment-section">
        <h2>Add Equipment</h2>
        <form class="add-equipment-form" @onsubmit="AddEquipmentItemAsync">
            <div class="form-group">
                <label for="name">Name:</label>
                <input type="text" id="name" @bind="newEquipment.Name" />
            </div>
            <div class="form-group">
                <label for="description">Description:</label>
                <input type="text" id="description" @bind="newEquipment.Description" />
            </div>
            <div class="form-group">
                <label for="category">Category Name:</label>
                <input type="text" id="category" @bind="newEquipment.CategoryName" />
            </div>
            <div class="form-group">
                <label for="daily-cost">Daily Cost:</label>
                <input type="number" id="daily-cost" @bind="newEquipment.DailyRentalCost" />
            </div>
            <button type="submit">Add Equipment</button>
        </form>
    </div>
</div>

@code {
    private List<Equipment> equipmentList;
    private Equipment newEquipment = new Equipment(0, 0, "", "", "", 0.0); // Initialize with default values
    private int currentPage = 1; // For pagination
    // Directly bind to a property of the Equipment object
    // private List<int> selectedEquipmentIds = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        equipmentList = await Equipment.GetEquipmentAsync();
        // Initialize IsSelected property (if needed for default states)
        if (equipmentList != null)
        {
            foreach (var equipment in equipmentList)
            {
                equipment.IsSelected = false; // Default to not selected
            }
        }
    }

    private async Task AddEquipmentItemAsync()
    {
        // Basic validation
        if (!string.IsNullOrEmpty(newEquipment.Name) && !string.IsNullOrEmpty(newEquipment.CategoryName) && newEquipment.DailyRentalCost > 0)
        {
            // We don't set EquipmentID here as it's auto-incremented in the database
            await Equipment.AddEquipmentAsync(new Equipment(0, 0, newEquipment.CategoryName, newEquipment.Name, newEquipment.Description, newEquipment.DailyRentalCost));
            newEquipment = new Equipment(0, 0, "", "", "", 0.0); // Clear the form
            equipmentList = await Equipment.GetEquipmentAsync(); // Refresh the list
            StateHasChanged(); // Re-render the component
        }
        else
        {
            Console.WriteLine("Please fill in all required fields and ensure daily cost is greater than zero.");

        }
    }

    private async Task RemoveEquipmentAsync(int equipmentId)
    {
        await Equipment.DeleteEquipmentAsync(equipmentId);
        equipmentList = await Equipment.GetEquipmentAsync(); // Refresh the list
        StateHasChanged(); // Re-render the component
    }

    // Now we work directly with the IsSelected property of the Equipment object
    private void ModifySelectedEquipment()
    {
        var selectedItems = equipmentList?.Where(e => e.IsSelected).ToList();
        if (selectedItems?.Any() == true)
        {
            Console.WriteLine($"Modifying {selectedItems.Count} equipment items (IDs: {string.Join(", ", selectedItems.Select(e => e.EquipmentID))}).");
            // Implement your modify logic here, perhaps navigate to an edit page with the selected IDs
        }
        else
        {
            Console.WriteLine("No equipment selected for modification.");
        }
    }

    private async Task RemoveSelectedEquipmentAsync()
    {
        var selectedItems = equipmentList?.Where(e => e.IsSelected).ToList();
        if (selectedItems?.Any() == true)
        {
            foreach (var equipmentToRemove in selectedItems.ToList()) // Iterate over a copy
            {
                await Equipment.DeleteEquipmentAsync(equipmentToRemove.EquipmentID);
            }
            equipmentList = await Equipment.GetEquipmentAsync(); // Refresh the list
            StateHasChanged(); // Re-render the component
        }
        else
        {
            Console.WriteLine("No equipment selected for removal.");
        }
    }
}