@page "/rentals"

@using Final_Project.Components.Pages.Data;


<style>
    .container {
    display: grid;
    grid-template-areas:
    "header1 header1 header2 header2"
    "label1 content1 label2 content2"
    "label3 content3 label4 content4"
    "label5 content5 label6 content6"
    "label7 content7 label8 label8"
    "footer1 footer1 footer2 footer2";
    grid-template-columns: 1fr 3fr 1fr 3fr;
    gap: 5px;
    background-color: #2196F3;
    padding: 5px;
    }

    .container > div {
    background-color: rgba(255, 255, 255, 0.8);
    padding: 10px;
    }

    .container > div.header1 {
    grid-area: header1;
    text-align: center;
    }

    .container > div.label1 {
    grid-area: label1;
    }

    .container > div.content1 {
    grid-area: content1;
    }

    .container > div.label3 {
    grid-area: label3;
    }

    .container > div.content3 {
    grid-area: content3;
    }

    .container > div.label5 {
    grid-area: label5;
    }

    .container > div.content5 {
    grid-area: content5;
    }

    .container > div.label7 {
    grid-area: label7;
    }

    .container > div.content7 {
    grid-area: content7;
    }

    .container > div.footer1 {
    grid-area: footer1;
    text-align: center
    }

    .container > div.header2 {
    grid-area: header2;
    text-align: center;
    }

    .container > div.label2 {
    grid-area: label2;
    }

    .container > div.content2 {
    grid-area: content2;
    }

    .container > div.label4 {
    grid-area: label4;
    }
    .container > div.content4 {
    grid-area: content4;
    }

    .container > div.label6 {
    grid-area: label6;
    }

    .container > div.content6 {
    grid-area: content6;
    }
    .container > div.label8 {
    grid-area: label8;
    }

    .container > div.content8 {
    grid-area: content8;
    }

    .container > div.footer2 {
    grid-area: footer2;
    text-align: center
    }

</style>

<div class="container">
    <div class="header1"><h1>New Rental</h1></div>

    <div class="label1">
        <h3>Customer:</h3>

    </div>

    <div class="content1">
        <SearchableDropdown TItem="Customer"
        Items="customers"
        SelectedItem="SelectedCustomer1"
        SelectedItemChanged="OnCustomerSelected1"
        Placeholder="Search customers...">
            <ItemTemplate>
                <div>
                    <strong>@context.customerID</strong>, @context.firstName @context.lastName, @context.email
                </div>
            </ItemTemplate>
        </SearchableDropdown>
        <p>Selected: @SelectedCustomer1?.customerID, @SelectedCustomer1?.firstName @SelectedCustomer1?.lastName</p>
    </div>
    <div class="label3">
        <h3>Equipment:</h3>
    </div>
    <div class="content3">
        <SearchableDropdown TItem="Equipment"
        Items="equipments"
        SelectedItem="SelectedEquipment1"
        SelectedItemChanged="OnEquipmentSelected1"
        Placeholder="Search Equipment...">
            <ItemTemplate>
                <div>
                    <strong>@context.equipmentID</strong>, @context.name
                </div>
            </ItemTemplate>
        </SearchableDropdown>
        <p>Selected: @SelectedEquipment1?.equipmentID, @SelectedEquipment1?.name @SelectedEquipment1?.description</p>
    </div>
    <div class="label5">
        <h3>Start Date:</h3>
    </div>
    <div class="content5">
        <input type="date" id="startDate" name="startDate" @bind="startDate1" @bind:after="GetRentalCost"/>
    </div>
    <div class="label7">
        <h3>Return Date:</h3>
    </div>
    <div class="content7">
        <input type="date" id="returnDate" name="returnDate" @bind="returnDate" @bind:after="GetRentalCost"/>
    </div>
    <div class="footer1">
        <h4>$@rentalCost=</h4>
        <h4>Rental Cost</h4>
        <button @onclick="AddNewRental">Add Rental</button>
    </div>

    <div class="header2"><h1>Find a Rental</h1></div>

    <div class="label2">
        <h3>Customer: </h3>
    </div>
    <div class="content2">
        <select class="form-control" @bind="SelectedCustomer2" @bind:after="OnSelectedCustomer2">
            <option value="">Select a Customer</option>
            @foreach (var c in rentalCustomers.Where(c => c != null))
            {
                <option value=@c.customerID>@c.customerID, @c.firstName @c.lastName</option>
            }
        </select>
    </div>
    <div class="label4">
        <h3>Equipment:</h3>
    </div>
    <div class="content4">
        <select class="form-control" @bind="SelectedEquipment2" @bind:after="OnSelectedEquipment">
            <option value="">Select Equipment</option>
            @foreach (var e in rentedEquipment.Where(e => e != null))
            {
                <option value=@e.equipmentID>@e.equipmentID, @e.name, @e.description</option>
            }
        </select>
    </div>
    <div class="label6">
        <h3>Rentals Found</h3>
    </div>
    <div class="content6">
        <select class="form-control" @bind="SelectedRentalID" @bind:after="OnSelectedRental">
            <option value="">Select Equipment</option>
            @foreach (var r in rentalSelection.Where(e => e != null))
            {
                <option value=@r.rentalID>@r.customerID, @r.equipmentID, @r.startDate</option>
            }
        </select>
    </div>
    <div class="label8">

    </div>
    <div class="footer2">
        <button @onclick="DeleteRental">Delete Rental</button>
    </div>
</div>




@code {
    private List<Customer> customers = Customer.GetCustomers();

    private Customer SelectedCustomer1{ get; set; }

    private void OnCustomerSelected1(Customer customer)
    {
        SelectedCustomer1 = customer;
    }

    private List<Equipment> equipments = Equipment.GetEquipment();

    private Equipment SelectedEquipment1 { get; set; }

    double rentalCost = 0.0;

    private void OnEquipmentSelected1(Equipment equipment)
    {
        SelectedEquipment1 = equipment;
        GetRentalCost();
    }

    private DateTime startDate1 = DateTime.Now;

    private DateTime returnDate = DateTime.Now.AddDays(1);

    private DateTime currentDate = DateTime.Now;


    private void GetRentalCost()
    {
        rentalCost = Rental.CalculateRentalCost(SelectedEquipment1.equipmentID, startDate1, returnDate);
    }
    private void AddNewRental()
    {
        var random = new Random();
        int rentalID = random.Next(1000, 9999); // Generate a random rental ID, this will not be the rental ID in the database.
        Rental rental = new Rental(rentalID, currentDate, SelectedCustomer1.customerID, SelectedEquipment1.equipmentID, startDate1, returnDate);
        Rental.AddRental(rental);
        SelectedCustomer1 = null;
        SelectedEquipment1 = null;
    }

    private List<Customer> rentalCustomers = Customer.GetCustomers();

    private List<Equipment> rentedEquipment = Equipment.GetEquipment();

    private List<Rental> rentals = Rental.GetRentals();

    private int SelectedCustomer2 { get; set; }

    private int SelectedEquipment2 { get; set; }

    private int SelectedRentalID { get; set; }

    private void GetRentalCustomers()
    {
		if (SelectedEquipment2 == 0)
		{
			rentalCustomers = Customer.GetCustomers();
			return;
		}
		else
		{
            List<Customer> updatedRentalCustomers = new List<Customer>();
            foreach (Rental rental in rentals)
            {
                if (rental.equipmentID == SelectedEquipment2)
                {
                    updatedRentalCustomers.Add(Customer.FindCustomerByID(rental.customerID));
                }
            }
            rentalCustomers = updatedRentalCustomers;
		}
    }

    private void GetRentedEquipment()
    {
        if (SelectedCustomer2 == 0)
        {
            rentedEquipment = Equipment.GetEquipment();
            return;
        }
        else
        {
            List<Equipment> updatedRentedEquipment = new List<Equipment>();
            foreach (Rental rental in rentals)
            {
                if (rental.customerID == SelectedCustomer2)
                {
                    updatedRentedEquipment.Add(Equipment.FindEquipmentByID(rental.equipmentID));
                }
            }
            rentedEquipment = updatedRentedEquipment;
        }
        
    }
    private List<Rental> rentalSelection = Rental.GetRentals();
    private void UpdateRentalSelection()
    {
		List<Rental> updatedRentals = new List<Rental>();
        foreach (Rental rental in rentals)
        {
			if (rental.customerID == SelectedCustomer2 && rental.equipmentID == SelectedEquipment2)
			{
				updatedRentals.Add(rental);
			}
        }
		rentalSelection = updatedRentals;
    }
    private void DeleteRental()
    {
        Rental rental = Rental.FindRental(SelectedRentalID);
		if (rental != null)
		{
			Rental.DeleteRental(rental.rentalID);
		}
    }
    private void OnSelectedCustomer2()
	{
		GetRentedEquipment();
		UpdateRentalSelection();
	}
	private void OnSelectedEquipment()
	{
		GetRentalCustomers();
		UpdateRentalSelection();
	}

	private void OnSelectedRental()
	{
		SelectedCustomer2 = Rental.FindRental(SelectedRentalID).customerID;
		SelectedEquipment2 = Rental.FindRental(SelectedRentalID).equipmentID;
	}
}
