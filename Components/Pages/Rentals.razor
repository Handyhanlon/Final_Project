@page "/rentals"
@using Final_Project.Components.Pages.Data;


<style>
    .container {
        display: grid;
        grid-template-areas:
            "header1 header1 header2 header2"
            "label1 content1 label2 content2"
            "label3 content3 label4 content4"
            "label5 content5 label6 content6"
            "label7 content7 label8 label8"
            "footer1 footer1 footer2 footer2";
        grid-template-columns: 1fr 3fr 1fr 3fr;
        gap: 5px;
        background-color: #2196F3;
        padding: 5px;
    }

        .container > div {
            background-color: rgba(255, 255, 255, 0.8);
            padding: 10px;
        }

            .container > div.header1 {
                grid-area: header1;
                text-align: center;
            }

            .container > div.label1 {
                grid-area: label1;
            }

            .container > div.content1 {
                grid-area: content1;
            }

            .container > div.label3 {
                grid-area: label3;
            }

            .container > div.content3 {
                grid-area: content3;
            }

            .container > div.label5 {
                grid-area: label5;
            }

            .container > div.content5 {
                grid-area: content5;
            }

            .container > div.label7 {
                grid-area: label7;
            }

            .container > div.content7 {
                grid-area: content7;
            }

            .container > div.footer1 {
                grid-area: footer1;
                text-align: center
            }

            .container > div.header2 {
                grid-area: header2;
                text-align: center;
            }

            .container > div.label2 {
                grid-area: label2;
            }

            .container > div.content2 {
                grid-area: content2;
            }

            .container > div.label4 {
                grid-area: label4;
            }

            .container > div.content4 {
                grid-area: content4;
            }

            .container > div.label6 {
                grid-area: label6;
            }

            .container > div.content6 {
                grid-area: content6;
            }

            .container > div.label8 {
                grid-area: label8;
            }

            .container > div.content8 {
                grid-area: content8;
            }

            .container > div.footer2 {
                grid-area: footer2;
                text-align: center
            }
</style>


<div class="container">
    <div class="header1"><h1>New Rental</h1></div>

    <div class="label1">
        <h3>Customer:</h3>
    </div>

    <div class="content1">
        <SearchableDropdown TItem="Customer"
                            Items="customers"
                            SelectedItem="SelectedCustomer1"
                            SelectedItemChanged="OnCustomerSelected1"
                            Placeholder="Search customers...">
            <ItemTemplate>
                <div>
                    <strong>@context.CustomerID</strong>, @context.FirstName @context.LastName, @context.Email
                </div>
            </ItemTemplate>
        </SearchableDropdown>
        <p>Selected: @SelectedCustomer1?.CustomerID, @SelectedCustomer1?.FirstName @SelectedCustomer1?.LastName</p>
    </div>

    <div class="label3">
        <h3>Equipment:</h3>
    </div>
    <div class="content3">
        <SearchableDropdown TItem="Equipment"
                            Items="equipments"
                            SelectedItem="SelectedEquipment1"
                            SelectedItemChanged="OnEquipmentSelected1"
                            Placeholder="Search Equipment...">
            <ItemTemplate>
                <div>
                    <strong>@context.EquipmentID</strong>, @context.Name
                </div>
            </ItemTemplate>
        </SearchableDropdown>
        <p>Selected: @SelectedEquipment1?.EquipmentID, @SelectedEquipment1?.Name @SelectedEquipment1?.Description</p>
    </div>

    <div class="label5">
        <h3>Start Date:</h3>
    </div>
    <div class="content5">
        <input type="date" id="startDate" name="startDate" @bind="startDate1" @bind:after="GetRentalCostAsync" />
    </div>

    <div class="label7">
        <h3>Return Date:</h3>
    </div>
    <div class="content7">
        <input type="date" id="returnDate" name="returnDate" @bind="returnDate" @bind:after="GetRentalCostAsync" />
    </div>

    <div class="footer1">
        <h4>$@rentalCost</h4>
        <h4>Rental Cost</h4>
        <button @onclick="AddNewRentalAsync">Add Rental</button>
    </div>

    <div class="header2"><h1>Find a Rental</h1></div>

    <div class="label2">
        <h3>Customer: </h3>
    </div>
    <div class="content2">
        <select class="form-control" @bind="SelectedCustomer2" @bind:after="OnSelectedCustomer2Async">
            <option value="">Select a Customer</option>
            @if (rentalCustomers != null)
            {
                @foreach (var c in rentalCustomers.Where(c => c != null))
                {
                    <option value="@c.CustomerID">@c.CustomerID, @c.FirstName @c.LastName</option>
                }
            }
        </select>
    </div>

    <div class="label4">
        <h3>Equipment:</h3>
    </div>
    <div class="content4">
        <select class="form-control" @bind="SelectedEquipment2" @bind:after="OnSelectedEquipmentAsync">
            <option value="">Select Equipment</option>
            @if (rentedEquipment != null)
            {
                @foreach (var e in rentedEquipment.Where(e => e != null))
                {
                    <option value="@e.EquipmentID">@e.EquipmentID, @e.Name, @e.Description</option>
                }
            }
        </select>
    </div>

    <div class="label6">
        <h3>Rentals Found</h3>
    </div>
    <div class="content6">
        <select class="form-control" @bind="SelectedRentalID" @bind:after="OnSelectedRentalAsync">
            <option value="">Select Rental</option>
            @if (rentalSelection != null)
            {
                @foreach (var r in rentalSelection.Where(r => r != null))
                {
                    <option value="@r.RentalID">@r.CustomerID, @r.EquipmentID, @r.StartDate.ToShortDateString()</option>
                }
            }
        </select>
    </div>

    <div class="label8"></div>

    <div class="footer2">
        <button @onclick="DeleteRentalAsync">Delete Rental</button>
    </div>
</div>

@code {
    private List<Customer> customers;
    private Customer SelectedCustomer1 { get; set; }

    private void OnCustomerSelected1(Customer customer)
    {
        SelectedCustomer1 = customer;
    }

    private List<Equipment> equipments;
    private Equipment SelectedEquipment1 { get; set; }

    double rentalCost = 0.0;

    private async Task OnEquipmentSelected1(Equipment equipment)
    {
        SelectedEquipment1 = equipment;
        await GetRentalCostAsync();
    }

    private DateTime startDate1 = DateTime.Now;
    private DateTime returnDate = DateTime.Now.AddDays(1);
    private DateTime currentDate = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        customers = await Customer.GetCustomersAsync();
        equipments = await Equipment.GetEquipmentAsync();
        rentals = await Rental.GetRentalsAsync();

        Console.WriteLine($"[RentalPage] Number of Customers loaded: {customers?.Count ?? 0}");
        Console.WriteLine($"[RentalPage] Number of Equipment loaded: {equipments?.Count ?? 0}");
        Console.WriteLine($"[RentalPage] Number of Rentals loaded: {rentals?.Count ?? 0}");

        rentalCustomers = customers;
        rentedEquipment = equipments; // Ensure this is here for initial load

        Console.WriteLine($"[RentalPage] Number of Rental Equipment initialized: {rentedEquipment?.Count ?? 0}");
    }

    private async Task GetRentalCostAsync()
    {
        if (SelectedEquipment1 != null)
        {
            rentalCost = await Rental.CalculateRentalCostAsync(SelectedEquipment1.EquipmentID, startDate1, returnDate);
        }
    }

    private async Task AddNewRentalAsync()
    {
        if (SelectedCustomer1 != null && SelectedEquipment1 != null)
        {
            var random = new Random();
            int rentalID = random.Next(1000, 9999);
            Rental rental = new Rental(rentalID, currentDate, SelectedCustomer1.CustomerID, SelectedEquipment1.EquipmentID, startDate1, returnDate);
            await Rental.AddRentalAsync(rental);
            // After adding, refresh the rental list
            rentals = await Rental.GetRentalsAsync();
            // Optionally clear selections
            SelectedCustomer1 = null;
            SelectedEquipment1 = null;
        }
        else
        {
            // Handle the case where customer or equipment is not selected
            Console.WriteLine("Please select a customer and equipment.");
        }
    }

    private List<Customer> rentalCustomers;
    private List<Equipment> rentedEquipment;
    private List<Rental> rentals;

    private int SelectedCustomer2 { get; set; }
    private int SelectedEquipment2 { get; set; }
    private int SelectedRentalID { get; set; }

    private async Task GetRentalCustomersAsync()
    {
        if (SelectedEquipment2 == 0)
        {
            rentalCustomers = await Customer.GetCustomersAsync();
            return;
        }
        else
        {
            List<Customer> updatedRentalCustomers = new List<Customer>();
            foreach (Rental rental in rentals)
            {
                if (rental.EquipmentID == SelectedEquipment2)
                {
                    var customer = await Customer.FindCustomerByIDAsync(rental.CustomerID);
                    if (customer != null)
                    {
                        updatedRentalCustomers.Add(customer);
                    }
                }
            }
            rentalCustomers = updatedRentalCustomers;
        }
    }

    private async Task GetRentedEquipmentAsync()
    {
        if (SelectedCustomer2 == 0)
        {
            rentedEquipment = await Equipment.GetEquipmentAsync();
            return;
        }
        else
        {
            List<Equipment> updatedRentedEquipment = new List<Equipment>();
            foreach (Rental rental in rentals)
            {
                if (rental.CustomerID == SelectedCustomer2)
                {
                    var equipment = await Equipment.FindEquipmentByIDAsync(rental.EquipmentID);
                    if (equipment != null)
                    {
                        updatedRentedEquipment.Add(equipment);
                    }
                }
            }
            rentedEquipment = updatedRentedEquipment;
        }
    }

    private List<Rental> rentalSelection;

    private async Task UpdateRentalSelectionAsync()
    {
        List<Rental> updatedRentals = new List<Rental>();
        foreach (Rental rental in rentals)
        {
            if (rental.CustomerID == SelectedCustomer2 && rental.EquipmentID == SelectedEquipment2)
            {
                updatedRentals.Add(rental);
            }
        }
        rentalSelection = updatedRentals;
    }

    private async Task DeleteRentalAsync()
    {
        var rentalToDelete = await Rental.FindRentalAsync(SelectedRentalID);
        if (rentalToDelete != null)
        {
            await Rental.DeleteRentalAsync(rentalToDelete.RentalID);
            // After deleting, refresh the rental list and selection
            rentals = await Rental.GetRentalsAsync();
            await UpdateRentalSelectionAsync();
        }
    }

    private async Task OnSelectedCustomer2Async()
    {
        await GetRentedEquipmentAsync();
        await UpdateRentalSelectionAsync();
    }

    private async Task OnSelectedEquipmentAsync()
    {
        await GetRentalCustomersAsync();
        await UpdateRentalSelectionAsync();
    }

    private async Task OnSelectedRentalAsync()
    {
        var rental = await Rental.FindRentalAsync(SelectedRentalID);
        if (rental != null)
        {
            SelectedCustomer2 = rental.CustomerID;
            SelectedEquipment2 = rental.EquipmentID;
            // Optionally, you might want to load the corresponding customer and equipment objects
            // for display elsewhere.
        }
    }
}